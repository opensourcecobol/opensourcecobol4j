### OpenCOBOL Test Suite				-*- m4 -*-

## Copyright (C) 2003-2009 Keisuke Nishida
## Copyright (C) 2007-2009 Roger While
##
## This program is free software; you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation; either version 2, or (at your option)
## any later version.
## 
## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
## 
## You should have received a copy of the GNU General Public License
## along with this software; see the file COPYING.  If not, write to
## the Free Software Foundation, 51 Franklin Street, Fifth Floor
## Boston, MA 02110-1301 USA

### ISO+IEC+1989-2002 8.4.1.2 Subscripts

## 8.4.1.2.3 General rules


# 1) TODO

AT_SETUP([non-numeric subscript])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 G1.
         02 X           PIC X OCCURS 10.
       01 I             PIC X.
       PROCEDURE        DIVISION.
           DISPLAY X(I)
           END-DISPLAY.
           DISPLAY X(I + 1)
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([${COMPILE_ONLY} prog.cob], [1], ,
[prog.cob:10: Error: 'I' is not an integer value
prog.cob:12: Error: 'I' is not a numeric value
])

AT_CLEANUP


# 2) DONE

AT_SETUP([The range of subscripts])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 G1.
         02 X           OCCURS 2.
           03 Y         PIC X OCCURS 3.
       PROCEDURE        DIVISION.
           DISPLAY X(0)
           END-DISPLAY.
           DISPLAY X(1)
           END-DISPLAY.
           DISPLAY X(2)
           END-DISPLAY.
           DISPLAY X(3)
           END-DISPLAY.
           DISPLAY Y(1, 0)
           END-DISPLAY.
           DISPLAY Y(1, 1)
           END-DISPLAY.
           DISPLAY Y(1, 3)
           END-DISPLAY.
           DISPLAY Y(1, 4)
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([${COMPILE_ONLY} prog.cob], [1], ,
[prog.cob:10: Error: Subscript of 'X' out of bounds: 0
prog.cob:16: Error: Subscript of 'X' out of bounds: 3
prog.cob:18: Error: Subscript of 'Y' out of bounds: 0
prog.cob:24: Error: Subscript of 'Y' out of bounds: 4
])

AT_CLEANUP


AT_SETUP([Subscript out of bounds (1)])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 G.
         02 X           PIC X OCCURS 10.
       01 I             PIC 9 VALUE 0.
       PROCEDURE        DIVISION.
           DISPLAY X(I)
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([${COMPILE_SUBSCRIPT} prog.cob])
AT_CHECK([java prog], [1], ,
[prog.cob:10: libcobj: Subscript of 'X' out of bounds: 0
])

AT_CLEANUP


AT_SETUP([Subscript out of bounds (2)])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 G.
         02 X           PIC X OCCURS 10.
       01 I             PIC 99 VALUE 11.
       PROCEDURE        DIVISION.
           DISPLAY X(I)
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([${COMPILE_SUBSCRIPT} prog.cob])
AT_CHECK([java prog], [1], ,
[prog.cob:10: libcobj: Subscript of 'X' out of bounds: 11
])

AT_CLEANUP

AT_SETUP([Subscript out of bounds (3-1)])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 G.
         02 X           PIC X OCCURS 10.
       01 I             PIC 99 VALUE 11.
       PROCEDURE        DIVISION.
           IF "A" NOT = X(I)
               DISPLAY "DIFFER".
           STOP RUN.
])

AT_CHECK([${COMPILE_SUBSCRIPT} prog.cob])
AT_CHECK([java prog], [1], ,
[prog.cob:10: libcobj: Subscript of 'X' out of bounds: 11
])

AT_CLEANUP

AT_SETUP([Subscript out of bounds (3-2)])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 G.
         02 X           PIC X OCCURS 10.
       01 I             PIC 99 VALUE 11.
       PROCEDURE        DIVISION.
           IF X(I) NOT = "A"
               DISPLAY "DIFFER".
           STOP RUN.
])

AT_CHECK([${COMPILE_SUBSCRIPT} prog.cob])
AT_CHECK([java prog], [1], ,
[prog.cob:10: libcobj: Subscript of 'X' out of bounds: 11
])

AT_CLEANUP

AT_SETUP([Subscript out of bounds (3-3)])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 G.
         02 X           PIC XX OCCURS 10.
       01 I             PIC 99 VALUE 11.
       PROCEDURE        DIVISION.
           IF X(I) NOT = "AA"
               DISPLAY "DIFFER".
           STOP RUN.
])

AT_CHECK([${COMPILE_SUBSCRIPT} prog.cob])
AT_CHECK([java prog], [1], ,
[prog.cob:10: libcobj: Subscript of 'X' out of bounds: 11
])

AT_CLEANUP

AT_SETUP([Subscript out of bounds (3-4)])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 G.
         02 X           PIC 9  BINARY OCCURS 10.
       01 I             PIC 99 VALUE 11.
       PROCEDURE        DIVISION.
           IF 5 NOT = X(I)
               DISPLAY "DIFFER".
           STOP RUN.
])

AT_CHECK([${COMPILE_SUBSCRIPT} prog.cob])
AT_CHECK([java prog], [1], ,
[prog.cob:10: libcobj: Subscript of 'X' out of bounds: 11
])

AT_CLEANUP

AT_SETUP([Value of DEPENDING ON N out of bounds (lower)])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 G.
         02 X           PIC X OCCURS 4 TO 6 DEPENDING ON N.
       01 N             PIC 9 VALUE 3.
       PROCEDURE        DIVISION.
           DISPLAY X(5)
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([${COMPILE_SUBSCRIPT} prog.cob])
AT_CHECK([java prog], [1], ,
[prog.cob:10: libcobj: OCCURS DEPENDING ON 'N' out of bounds: 3
])

AT_CLEANUP


AT_SETUP([Value of DEPENDING ON N out of bounds (upper)])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 G.
         02 X           PIC X OCCURS 4 TO 6 DEPENDING ON N.
       01 N             PIC 9 VALUE 7.
       PROCEDURE        DIVISION.
           DISPLAY X(5)
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([${COMPILE_SUBSCRIPT} prog.cob])
AT_CHECK([java prog], [1], ,
[prog.cob:10: libcobj: OCCURS DEPENDING ON 'N' out of bounds: 7
])

AT_CLEANUP


AT_SETUP([Subscript bounds with ODO (lower)])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 G.
         02 X           PIC X OCCURS 4 TO 6 DEPENDING ON N.
       01 N             PIC 9 VALUE 4.
       PROCEDURE        DIVISION.
           DISPLAY X(0)
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([${COMPILE} prog.cob], [1], ,
[prog.cob:10: Error: Subscript of 'X' out of bounds: 0
])

AT_CLEANUP


AT_SETUP([Subscript bounds with ODO (upper)])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 G.
         02 X           PIC X OCCURS 4 TO 6 DEPENDING ON N.
       01 N             PIC 9 VALUE 4.
       PROCEDURE        DIVISION.
           DISPLAY X(7)
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([${COMPILE} prog.cob], [1], ,
[prog.cob:10: Error: Subscript of 'X' out of bounds: 7
])

AT_CLEANUP


AT_SETUP([Subscript bounds with ODO])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 G.
         02 X           PIC X OCCURS 4 TO 6 DEPENDING ON N.
       01 N             PIC 9 VALUE 4.
       PROCEDURE        DIVISION.
           DISPLAY X(5)
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([${COMPILE_SUBSCRIPT} prog.cob])
AT_CHECK([java prog], [1], ,
[prog.cob:10: libcobj: Subscript of 'X' out of bounds: 5
])

AT_CLEANUP


##

AT_SETUP([Subscript by arithmetic expression])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 G             VALUE "1234".
         02 X           PIC X OCCURS 4.
       PROCEDURE        DIVISION.
           DISPLAY X((3 + 1) / 2) NO ADVANCING
           END-DISPLAY.
           DISPLAY X(2 ** 2) NO ADVANCING
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([${COMPILE_SUBSCRIPT} prog.cob])
AT_CHECK([java prog], [0], [24])

AT_CLEANUP


AT_SETUP([Subscript out of bounds in MOVE (1)])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 G.
         02 X           PIC X OCCURS 10.
       01 I             PIC 9 VALUE 0.
       01 Z             PIC X.
       PROCEDURE        DIVISION.
           MOVE X(I) TO Z.
           STOP RUN.
])

AT_CHECK([${COMPILE_SUBSCRIPT} prog.cob])
AT_CHECK([java prog], [1], ,
[prog.cob:11: libcobj: Subscript of 'X' out of bounds: 0
])

AT_CLEANUP


AT_SETUP([Subscript out of bounds in MOVE (2)])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 G.
         02 X           PIC X OCCURS 10.
       01 I             PIC 9 VALUE 0.
       01 Z             PIC X.
       PROCEDURE        DIVISION.
           MOVE Z TO X(I).
           STOP RUN.
])

AT_CHECK([${COMPILE_SUBSCRIPT} prog.cob])
AT_CHECK([java prog], [1], ,
[prog.cob:11: libcobj: Subscript of 'X' out of bounds: 0
])

AT_CLEANUP


AT_SETUP([Subscript out of bounds without debug])
AT_CHECK([${SKIP_TEST}])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 G.
         02 X           PIC X OCCURS 10.
       01 I             PIC 9 VALUE 0.
       01 Z             PIC X.
       PROCEDURE        DIVISION.
           MOVE Z TO X(I).
           STOP RUN.
])

AT_CHECK([${COMPILE_DEFAULT} prog.cob])
AT_CHECK([java prog], [0])

AT_CLEANUP


AT_SETUP([Subscript out of bounds check option])
AT_CHECK([${SKIP_TEST}])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 G.
         02 X           PIC X OCCURS 10.
       01 I             PIC 9 VALUE 0.
       01 Z             PIC X.
       PROCEDURE        DIVISION.
           MOVE Z TO X(I).
           STOP RUN.
])

AT_CHECK([${COMPILE_JP_COMPAT_DEFAULT} prog.cob])
AT_CHECK([java prog], [1], ,
[libcobj: Subscript of 'X' out of bounds: 0
])

AT_CLEANUP
