/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package jp.osscons.opensourcecobol.libcobj.user_util.cobj_api;

import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.nio.file.Files;
import java.nio.file.Paths;
import org.json.JSONArray;
import org.json.JSONObject;

/** API連携用のJavaファイルを出力するクラス */
class ApiFiles {
  private static JSONObject param;
  private static String name;
  private static String type;
  private static String programId;

  /**
   * 入力された値を受け取り、javaCreateメソッドを呼び出す
   *
   * @param args コマンドラインから入力された文字列
   */
  public static void main(String[] args) {
    ApiFilesOptions.getOptions(args);

    if (args.length == 0) {
      System.out.println("No json file is specified.");
      System.exit(1);
    }

    String filePath;
    try {
      filePath = args[1];
    } catch (ArrayIndexOutOfBoundsException e) {
      filePath = args[0];
    }

    javaCreate(filePath);
  }

  /**
   * API連携用のJavaファイルを生成する
   *
   * @param filePath 生成されたJavaファイルを配置するディレクトリのパス
   */
  static void javaCreate(String filePath) {
    try {
      String json = new String(Files.readAllBytes(Paths.get(filePath)));
      JSONObject obj = new JSONObject(json);
      JSONArray params = obj.getJSONArray("procedure_division_using_parameters");
      String outputDir;
      FileWriter ctlFile;
      FileWriter rcdFile;

      programId = obj.getString("program_id");

      if (ApiFilesOptions.outputDir != null) {
        outputDir = ApiFilesOptions.outputDir + "/";
        ctlFile = new FileWriter(outputDir + programId + "Controller.java");
        rcdFile = new FileWriter(outputDir + programId + "Record.java");
      } else {
        ctlFile = new FileWriter(programId + "Controller.java");
        rcdFile = new FileWriter(programId + "Record.java");
      }

      writeController(ctlFile, params);
      writeRecord(rcdFile, params);

    } catch (IOException e) {
      e.printStackTrace();
      System.err.println("Error reading file: " + e.getMessage());
      System.exit(1);
    }
  }

  /**
   * <PROGRAM-ID>Controller.javaのコードを記述する
   *
   * @param ctlFile <PROGRAM-ID>Controller.javaのファイルの情報を保持する
   * @param programId PROGRAM-IDに記述されているプログラム名
   * @param params PROCEDURE DIVISION USING句に記述されている引数の配列
   */
  private static void writeController(FileWriter ctlFile, JSONArray params) {
    PrintWriter ctlWriter = new PrintWriter(ctlFile);
    String defaultValue;
    String methodName;
    String nameController = programId + "Controller";
    String nameRecord = programId + "Record";
    int i;

    if (ApiFilesOptions.packageName != null) {
      ctlWriter.println("package " + ApiFilesOptions.packageName + ";");
    } else {
      ctlWriter.println("package com.example.restservice;");
    }

    ctlWriter.println(
        "import java.util.concurrent.atomic.AtomicLong;\n"
            + "import org.springframework.web.bind.annotation.RequestMapping;\n"
            + "import org.springframework.web.bind.annotation.GetMapping;\n"
            + "import org.springframework.web.bind.annotation.PostMapping;\n"
            + "import org.springframework.web.bind.annotation.RequestParam;\n"
            + "import org.springframework.web.bind.annotation.RequestBody;\n"
            + "import org.springframework.web.bind.annotation.RestController;\n"
            + "import jp.osscons.opensourcecobol.libcobj.ui.*;\n");

    ctlWriter.println(
        "@RestController\n"
            + "@RequestMapping(\"/"
            + programId
            + "\")\n"
            + "public class "
            + nameController
            + " {\n\n"
            + "    @GetMapping\n"
            + "    public "
            + nameRecord
            + " "
            + nameController
            + "(");

    for (i = 0; i < params.length(); ++i) {
      param = params.getJSONObject(i);
      name = param.getString("variable_name").replace('-', '_');
      type = param.getString("java_type");
      if ("String".equals(type)) {
        defaultValue = "\"\"";
      } else {
        defaultValue = "\"0\"";
      }

      ctlWriter.print(
          "        @RequestParam(value = "
              + "\""
              + name
              + "\", defaultValue = "
              + defaultValue
              + ") "
              + type
              + " "
              + name);

      if (i < params.length() - 1) {
        ctlWriter.println(",");
      } else {
        ctlWriter.println();
      }
    }

    ctlWriter.print("    ) {\n" + "        return " + programId + "Execute(");

    argPrint(ctlWriter, params, false, false);

    ctlWriter.println(");\n" + "    }\n");

    ctlWriter.print(
        "    @PostMapping\n"
            + "    public "
            + nameRecord
            + " "
            + nameController
            + "Execute(@RequestBody "
            + nameRecord
            + " "
            + programId
            + "Record) {\n"
            + "        return "
            + programId
            + "Execute(");

    argPrint(ctlWriter, params, false, true);

    ctlWriter.println(");\n" + "    }\n");
    ctlWriter.print("    private " + nameRecord + " " + programId + "Execute(");

    argPrint(ctlWriter, params, true, false);

    ctlWriter.print(
        ") {\n"
            + "        int statuscode = 200;\n"
            + "        "
            + programId
            + " "
            + programId
            + "Cobol = new "
            + programId
            + "();\n"
            + "        CobolResultSet result = "
            + programId
            + "Cobol.execute(");

    argPrint(ctlWriter, params, false, false);
    ctlWriter.println(");\n" + "        try {");

    for (i = 0; i < params.length(); ++i) {
      param = params.getJSONObject(i);
      name = param.getString("variable_name").replace('-', '_');
      type = param.getString("java_type");
      if ("String".equals(type)) {
        methodName = "getString";
      } else if ("int".equals(type)) {
        methodName = "getInt";
      } else {
        methodName = "getDouble";
      }
      ctlWriter.println("            " + name + " = result." + methodName + "(" + (i + 1) + ");");
    }

    ctlWriter.print(
        "        } catch (Exception e) {\n"
            + "            statuscode = 500;\n"
            + "        }\n"
            + "        return new "
            + programId
            + "Record(statuscode, ");

    argPrint(ctlWriter, params, false, false);

    ctlWriter.println(");\n" + "    }\n" + "}");
    ctlWriter.close();
  }

  /**
   * <PROGRAM-ID>Record.javaのコードを記述する
   *
   * @param rcdFile <PROGRAM-ID>Record.javaのファイル情報を保持する
   * @param programId PROGRAM-IDに記述されているプログラム名
   * @param params PROCEDURE DIVISION USING句に記述されている引数の配列
   */
  private static void writeRecord(FileWriter rcdFile, JSONArray params) {
    PrintWriter rcdWriter = new PrintWriter(rcdFile);

    rcdWriter.print(
        "package com.example.restservice;\n"
            + "public record "
            + programId
            + "Record(int statuscode, ");

    argPrint(rcdWriter, params, true, false);

    rcdWriter.println(") {}");
    rcdWriter.close();
  }

  /**
   * 生成されるJavaファイルに記述されるメソッドの引数などを記述する
   *
   * @param writer 生成されるJavaファイルの情報を保持する
   * @param params PROCEDURE DIVISION USING句に記述されている引数の配列
   * @param isType 引数の型を記述するかどうか
   * @param isRecord 引数がレコード型かどうか
   */
  private static void argPrint(
      PrintWriter writer, JSONArray params, boolean isType, boolean isRecord) {
    int i;

    for (i = 0; i < params.length(); ++i) {
      param = params.getJSONObject(i);
      name = param.getString("variable_name").replace('-', '_');
      if (isType) {
        type = param.getString("java_type");
        name = type + " " + name;
      } else if (isRecord) {
        name = programId + "Record." + name + "()";
      }
      writer.print(name);
      if (i < params.length() - 1) {
        writer.print(", ");
      }
    }
  }
}
